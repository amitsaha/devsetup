---
- hosts: all
  vars:
    ag_package_name: false
    docker_package_name: false
    go_binary: false
    go_tarball: "go-bin.tar.gz"
    go_version_target_linux: "go version go1.8.1 linux/amd64"
    go_version_target_osx: "go version go1.8.1 darwin/amd64"
    terraform_version: "0.11.5"
    terraform_download_url: "https://releases.hashicorp.com/terraform"
    yawsi_version: "0.2"
    yawsi_download_url: "https://github.com/amitsaha/yawsi/releases/download"
  tasks:
  - name: Set ag package name on Ubuntu
    set_fact:
      ag_package_name: "silversearcher-ag"
    when: ansible_distribution == 'Ubuntu' and ansible_lsb.major_release|int >= 16

  - name: Set ag package name on Fedora
    set_fact:
      ag_package_name: "the_silver_searcher"
    when: ansible_distribution == 'Fedora'

  - name: Install tools on Linux
    package: name={{item}} state=latest
    with_items:
      - neovim
      - python3-neovim
      - python3-pip
      - tmux
      - gcc
      - git
      - jq
      - "{{ ag_package_name }}"
    become: true
    when: ansible_distribution == 'Fedora' or ansible_distribution == 'Ubuntu'

  - name: Install liselinux-python on Fedora
    package: name={{item}} state=latest
    with_items:
      - libselinux-python
    become: true
    when: ansible_distribution == 'Fedora'

  - name: Set SELinux to permissive
    selinux:
      policy: targeted
      state: permissive
    become: true
    when: ansible_distribution == 'Fedora'

  - name: Install tools on OS X
    homebrew: name={{item}} state=latest update_homebrew=yes
    with_items:
      - neovim
      - tmux
      - git
      - python3
      - reattach-to-user-namespace
      - fzf
    when: ansible_os_family == 'Darwin'

  - name: Install neovim-python3 package from pip
    pip: 
      name: neovim
      executable: pip3
      extra_args: --user

  - name: Install aws CLI package from pip
    pip: 
      name: awscli
      executable: pip3
      extra_args: --user

  - name: Set docker package name on Ubuntu
    set_fact:
      docker_package_name: "docker.io"
    when: ansible_distribution == 'Ubuntu' and ansible_lsb.major_release|int >= 16

  - name: Set docker package name on Fedora
    set_fact:
      docker_package_name: "docker"
    when: ansible_distribution == 'Fedora' and ansible_distribution_major_version|int >= 23 

  - name: Install Docker engine on Linux
    package: name={{docker_package_name}} state=latest
    when: ansible_os_family == 'RedHat' or ansible_os_family == 'Ubuntu'
    become: true

  - name: Create docker group
    group:
      name: docker
      state: present
    when: ansible_system == 'Linux'
    become: true

  - name: Add {{ansible_user_id}} to docker group
    user: 
      name: '{{ ansible_user_id }}'
      groups: docker
      append: yes
    when: ansible_system == 'Linux'
    become: true

  - name: Enable and Start docker service
    service:
      name: docker
      enabled: yes
      state: started
    when: ansible_system == 'Linux'
    become: true

  - name: Set golang binary download filename for Linux 
    set_fact:
        go_binary: "go1.8.3.linux-amd64"
    when: ansible_distribution == 'Fedora' or ansible_distribution == 'Ubuntu'

  - name: Set golang binary download filename for OS X
    set_fact:
        go_binary: "go1.8.3.darwin-amd64"
    when: ansible_os_family == 'Darwin'

  - name: Download golang binary tarball
    get_url:
      url: "https://storage.googleapis.com/golang/{{go_binary}}.tar.gz"
      dest: /usr/local/{{go_tarball}}
    become: true

  - name: Register the current Go version
    command: /usr/local/go/bin/go version
    ignore_errors: yes
    register: go_version
    changed_when: false

  - name: Remove old installation of Go
    file:
      path: /usr/local/go
      state: absent
    when: go_version|failed or go_version.stdout != go_version_target_osx or go_version.stdout != go_version_target_linux
    become: true

  - name: Extract the Go tarball if Go is not yet installed or not the desired version
    command: tar -zxvf {{ go_tarball|quote }}
    args:
       chdir: /usr/local
    when: go_version|failed or go_version.stdout != go_version_target_linux or go_version.stdout != go_version_target_osx
    become: true
 
  - name: Create $HOME/.bin directory
    file:
      path: '~/.bin'
      state: directory
      mode: 0755

  - name: Set yawsi binary download filename for OS X
    set_fact:
        yawsi_binary: "yawsi-{{yawsi_version}}-darwin-amd64" 
    when: ansible_os_family == 'Darwin'

  - name: Set yawsi binary download filename for Linux 
    set_fact:
        yawsi_binary: "yawsi-{{yawsi_version}}-linux-amd64" 
    when: ansible_distribution == 'Fedora' or ansible_distribution == 'Ubuntu'
  
  - name: Download yawsi binary tarball into ~/.bin
    unarchive:
      src: "{{yawsi_download_url}}/v{{yawsi_version}}/{{yawsi_binary}}.zip"
      dest: ~/.bin/
      remote_src: true

  - name: Remove ~/.bin/yawsi if exists
    file:
      path: '~/.bin/yawsi'
      state: absent

  - name: Rename yawsi binary to yawsi
    command: mv ~/.bin/{{yawsi_binary}} ~/.bin/yawsi

  - name: Go get dep
    command: /usr/local/go/bin/go get -u github.com/golang/dep/cmd/dep

  - name: Set terraform binary download filename for OS X
    set_fact:
        terraform_binary: "terraform_{{terraform_version}}_darwin_amd64.zip" 
    when: ansible_os_family == 'Darwin'

  - name: Set terraform binary download filename for Linux
    set_fact:
        terraform_binary: "terraform_{{terraform_version}}_linux_amd64.zip" 
    when: ansible_distribution == 'Fedora' or ansible_distribution == 'Ubuntu'

  - name: Remove ~/.bin/terraform if exists
    file:
      path: '~/.bin/terraform'
      state: absent

  - name: Download terraform binary tarball into ~/.bin
    unarchive:
      src: "{{terraform_download_url}}/{{terraform_version}}/{{terraform_binary}}"
      dest: ~/.bin/
      remote_src: true

  - name: Create .vim directory
    file:
      path: '~/.vim'
      state: directory
      mode: 0755

  - name: Setup Vim Plugin Manager - Vundle
    git:
      repo: 'https://github.com/VundleVim/Vundle.vim.git'
      dest: '~/.vim/bundle/Vundle.vim'

  - name: Create nvim config directory
    file:
      path: '~/.config/nvim'
      state: directory
      mode: 0755

  - name: Copy nvim init file
    copy:
      src: "./config_files/init.vim"
      dest: "~/.config/nvim/init.vim"

  - name: Create nvim backup directory
    file:
      path: '~/.vim/backup_files'
      state: directory
      mode: 0755

  - name: Create nvim swap directory
    file:
      path: '~/.vim/swap_files'
      state: directory
      mode: 0755

  - name: Create nvim undo files directory
    file:
      path: '~/.vim/undo_files'
      state: directory
      mode: 0755

  - name: Install Vim plugins
    command: nvim +PluginInstall +qall

  - name: Create nvim config/colors directory
    file:
      path: '~/.config/nvim/colors'
      state: directory
      mode: 0755

  - name: Get Zenburn for vim
    get_url:
      url: https://raw.githubusercontent.com/jnurmine/Zenburn/master/colors/zenburn.vim
      dest: '~/.config/nvim/colors/zenburn.vim'
  - name: Get molokai for vim
    get_url:
      url: https://raw.githubusercontent.com/fatih/molokai/master/colors/molokai.vim
      dest: '~/.config/nvim/colors/molokai.vim'

  - name: Create .tmux directory
    file:
      path: '~/.tmux'
      state: directory
      mode: 0755

  - name: Setup tmux Plugin Manager - tpm
    git:
      repo: 'https://github.com/tmux-plugins/tpm'
      dest: '~/.tmux/plugins/tpm'

  - name: Copy tmux conf
    copy:
      src: "./config_files/tmux.conf"
      dest: "~/.tmux.conf"

  - name: Install tmux plugins
    command: "~/.tmux/plugins/tpm/bin/install_plugins"

  - name: Setup bash git prompt
    git:
      repo: 'https://github.com/magicmonty/bash-git-prompt.git'
      dest: '~/.bash-git-prompt'

  - name: Copy bashrc
    copy:
      src: "./config_files/bashrc"
      dest: "~/.bashrc"

  - name: Copy bash_profile
    copy:
      src: "./config_files/bash_profile"
      dest: "~/.bash_profile"

  - name: Copy gitconfig
    copy:
      src: "./config_files/gitconfig"
      dest: "~/.gitconfig"
